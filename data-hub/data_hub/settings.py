"""
Django settings for data_hub project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from distutils.util import strtobool
from celery.schedules import crontab

from dotenv import load_dotenv
from pathlib import Path
from corsheaders.defaults import default_headers



env_path = Path(".") / ".env"
load_dotenv(dotenv_path=env_path)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(strtobool(os.getenv("DEBUG", "True")))

ALLOWED_HOSTS = ["localhost","data-hub.ctnaval.com",'www.ctndatabase.ctnaval.com','data-hub-api.ctnaval.com']

CORS_ALLOWED_ORIGINS = [
    "http://localhost:8080",
    "http://localhost:5173",
    "http://localhost:4173",
    "http://localhost:8060",
    "https://data-hub.ctnaval.com",
    "https://data-hub-app.ctnaval.com",
    "https://data-hub-api.ctnaval.com"
]

CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS

CORS_ALLOW_HEADERS = [
    *default_headers,
    "x-access-token",
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "django.contrib.gis",
    # "channels",
    "django_filters",
    "rest_framework",
    "corsheaders",
    "django_keycloak",
    "data_hub",
    "cages",
    "station",
    "aquamore",
]

AUTHENTICATION_BACKENDS = ("django_keycloak.backends.KeycloakAuthenticationBackend",)

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    'django.middleware.csrf.CsrfViewMiddleware',
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_keycloak.middleware.KeycloakMiddleware",
    "django.middleware.gzip.GZipMiddleware",
]


ROOT_URLCONF = "data_hub.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "static")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

#WSGI_APPLICATION = "data_hub.wsgi.application"
ASGI_APPLICATION = 'data_hub.asgi.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [os.getenv("CELERY_URL")],
        },
    },
}


# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels.layers.InMemoryChannelLayer"
#     }
# }

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')



# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        #"ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": os.getenv("POSTGRES_DB"),
        "USER": os.getenv("POSTGRES_USER"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
        "HOST": "db",
        "PORT": 5432,
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "static/"

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

# FIXTURE_DIRS = [
#     os.path.join(BASE_DIR, 'cages/fixtures/'),
# ]

AUTH_USER_MODEL = "django_keycloak.KeycloakUserAutoId"

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    #"DEFAULT_PAGINATION_CLASS": None,
    "DEFAULT_FILTER_BACKENDS": ['django_filters.rest_framework.DjangoFilterBackend','rest_framework.filters.OrderingFilter'],
    'PAGE_SIZE': 5000,
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "django_keycloak.authentication.KeycloakAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
        "rest_framework.permissions.IsAuthenticated",
    ],
}



EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = bool(strtobool(os.getenv('EMAIL_USE_TLS', 'True')))
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = os.getenv("EMAIL_PORT")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
SERVER_EMAIL = os.getenv("SERVER_EMAIL")

CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 3155760000 # Pongo un tiempo absurdamente largo (100 años) para evitar que las tareas no se reintenten iniciar de forma indefinida  
CELERY_IGNORE_RESULT = True
CELERY_BROKER_URL = os.environ.get('CELERY_URL')
CELERYD_HIJACK_ROOT_LOGGER = False
REDIS_CHANNEL_URL = os.environ.get('REDIS_CHANNEL_URL')

CELERY_BEAT_SCHEDULE = {
    # 'process_ship_positions_daily': {
    #     'task': 'processingAISData.tasks.process_ship_positions',
    #     'schedule': crontab(hour=0, minute=0),  # Ejecutar a la medianoche
    # },
    # 'process_AIS_secondary_data_monthly': {
    #     'task': 'process_AIS_secondary_data', 
    #     'schedule': crontab(day_of_month='1', hour='0', minute='0'),  # Ejecutar el último día de cada mes a las 12 de la noche
    # },

    # 'checkAlertsRules_minute': {
    #     'task': 'alerts.tasks.checkAlertsRules',
    #     'schedule': 60,  
    # },
}


KEYCLOAK_CONFIG = {
    # The Keycloak's Public Server URL (e.g. http://localhost:8080)
    "SERVER_URL": os.getenv("KEYCLOAK_FRONT_HOST"),
    # The Keycloak's Internal URL
    # (e.g. http://keycloak:8080 for a docker service named keycloak)
    # Optional: Default is SERVER_URL
    "INTERNAL_URL": os.getenv("KEYCLOAK_HOST"),
    # Override for default Keycloak's base path
    # Default is '/auth/'
    "BASE_PATH": "/auth/",
    # The name of the Keycloak's realm
    "REALM": os.getenv("KEYCLOAK_REALM"),
    # The ID of this client in the above Keycloak realm
    "CLIENT_ID": os.getenv("KEYCLOAK_CLIENT_ID"),
    # The secret for this confidential client
    "CLIENT_SECRET_KEY": os.getenv("KEYCLOAK_CLIENT_SECRET_KEY"),
    # The name of the admin role for the client
    "CLIENT_ADMIN_ROLE": "admin",
    # The name of the admin role for the realm
    "REALM_ADMIN_ROLE": "admin-realm",
    # Regex formatted URLs to skip authentication
    "EXEMPT_URIS": ["swagger"],
    # Flag if the token should be introspected or decoded (default is False)
    "DECODE_TOKEN": False,
    # Flag if the audience in the token should be verified (default is True)
    "VERIFY_AUDIENCE": True,
    # Flag if the user info has been included in the token (default is True)
    "USER_INFO_IN_TOKEN": True,
    # Flag to show the traceback of debug logs (default is False)
    "TRACE_DEBUG_LOGS": False,
    # The token prefix that is expected in Authorization header (default is 'Bearer')
    "TOKEN_PREFIX": "Bearer",
}
