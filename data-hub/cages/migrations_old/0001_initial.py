# Generated by Django 5.1.4 on 2025-01-13 13:40

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('location', models.CharField(blank=True, max_length=256, null=True)),
                ('user', models.CharField(blank=True, max_length=256, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('sensor_type', models.IntegerField(choices=[(0, 'Load'), (1, 'SCL')], default=0)),
                ('cage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cages.cage')),
            ],
        ),
        # migrations.RunSQL(
        #     """
        #     CREATE EXTENSION IF NOT EXISTS pg_cron;
        #     """,
        #     reverse_sql="DROP EXTENSION IF EXISTS pg_cron;"
        # ),
        migrations.RunSQL(
            """
            CREATE TABLE sensorload (
                id BIGSERIAL PRIMARY KEY,
                date_time TIMESTAMP NOT NULL,
                weight FLOAT,
                sensor_id BIGINT NOT NULL,
                CONSTRAINT fk_sensor FOREIGN KEY (sensor_id) REFERENCES sensor (id),
                CONSTRAINT unique_sensor_date UNIQUE (sensor_id, date_time)
            ) PARTITION BY RANGE (date_time);
            """,
            reverse_sql="DROP TABLE IF EXISTS sensorload;"
        ),

        # migrations.RunSQL(
        #     """
        #     SELECT cron.schedule('create-sensorload-partitions', '0 0 1 * *', $$
        #       SELECT create_time_partitions(
        #           table_name         := 'sensorload',
        #           partition_interval := '1 month',
        #           end_at             := now() + '12 months'
        #       )
        #     $$);
        #     """,
        #     reverse_sql="SELECT cron.unschedule('create-sensorload-partitions');"
        # ),
    ]
